apply plugin: 'osgi'

configurations {
  osgiBundle
  integrationTestOsgiCompile.extendsFrom compile
  integrationTestOsgiRuntime
}

dependencies {
  compile "org.jruby:jruby-complete:$jrubyVersion"
  compile "com.beust:jcommander:$jcommanderVersion"
  compile "org.osgi:org.osgi.core:$osgiCoreVersion"
  gems "rubygems:asciidoctor:$asciidoctorGemVersion"
  gems "rubygems:coderay:$coderayGemVersion"
  gems "rubygems:erubis:$erubisGemVersion"
  gems "rubygems:haml:$hamlGemVersion"
  gems "rubygems:open-uri-cached:$openUriCachedGemVersion"
  gems "rubygems:slim:$slimGemVersion"
  gems "rubygems:thread_safe:$threadSafeGemVersion"
  gems "rubygems:tilt:$tiltGemVersion"
  // TODO could use dependency replacement feature to fix version of Saxon-HE
  testCompile("org.xmlmatchers:xml-matchers:$xmlMatchersVersion") { exclude module: 'Saxon-HE' }
  testCompile "net.sf.saxon:Saxon-HE:$saxonVersion"
  testCompile "com.google.guava:guava:$guavaVersion"
  testCompile "org.jsoup:jsoup:$jsoupVersion"
  testCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"

  osgiBundle group: 'org.jboss.arquillian.osgi', name: 'arquillian-osgi-bundle', version: '2.1.0.CR18', transitive: false
  osgiBundle "org.jruby:jruby-complete:$jrubyVersion"

  integrationTestOsgiCompile "junit:junit:$junitVersion"
  integrationTestOsgiCompile "org.jboss.arquillian.junit:arquillian-junit-container:$arquillianVersion"
  integrationTestOsgiCompile "org.jboss.arquillian.protocol:arquillian-protocol-jmx:$arquillianVersion"
  integrationTestOsgiCompile "org.jboss.arquillian.container:arquillian-container-felix-embedded:$arquillianContainerFelixVersion"
  integrationTestOsgiCompile "org.apache.felix:org.apache.felix.framework:5.0.0"
  integrationTestOsgiCompile "org.apache.felix:org.apache.felix.main:5.0.0"

}

def gemFiles = fileTree(jruby.gemInstallDir) {
  include 'specifications/*.gemspec'
  include 'gems/*/lib/**'
  include "gems/asciidoctor-${asciidoctorGemVersion}/data/**"
}

jrubyPrepareGems << {
  copy { // bundles the gems inside this artifact
    from gemFiles
    into sourceSets.main.output.resourcesDir
  }
}

task createJRubyDirFile(dependsOn: jrubyPrepareGems) << {
  List specs = file('build/resources/main/specifications').listFiles().findAll { it.name.endsWith('.gemspec') }.collect { it.name }
  String content = "..\n.\n${specs.join("\n")}"
  file('build/resources/main/specifications/.jrubydir').write(content)
}

jar.dependsOn createJRubyDirFile

//jruby {
//	execVersion = '1.7.20'
//}

jar {
  manifest {
    symbolicName = 'org.asciidoctor'
    instruction 'Bundle-Activator', 'org.asciidoctor.internal.AsciidoctorActivator'
    instruction 'Export-Package',
      "org.asciidoctor;version=\"${version}\"",
      "org.asciidoctor.ast;version=\"${version}\"",
      "org.asciidoctor.converter;version=\"${version}\"",
      "org.asciidoctor.converter.spi;version=\"${version}\"",
      "org.asciidoctor.extension;version=\"${version}\"",
      "org.asciidoctor.extension.spi;version=\"${version}\""
    instruction 'Import-Package',
      'com.beust.jcommander;resolution:=optional',
      'org.jruby.*;version="[9,10)"',
      '*'
  }
}


sourceSets {
  integrationTestOsgi {
    java {
      srcDir file('src/integration-test-osgi/java')
      compileClasspath += main.output + test.output + configurations.integrationTestOsgiCompile
    }
    resources.srcDir file('src/integration-test-osgi/resources')
  }
}

task copyOsgiBundle(type: Copy) {
  from configurations.osgiBundle
  into sourceSets.integrationTestOsgi.output.resourcesDir
}

processIntegrationTestOsgiResources {
  eachFile {
    if (it.name == 'felix.properties') {
      it.filter {line ->
        line
                .replaceAll('<arquillian-osgi-bundle>', arquillianContainerFelixVersion)
                .replaceAll('<jrubyVersion>', jrubyVersion)
      }
    }
  }
}


task integrationTestOsgi(type: Test) {

  systemProperty 'asciidoctorJarName', jar.archivePath.toString()

  testClassesDir = sourceSets.integrationTestOsgi.output.classesDir
  classpath = sourceSets.integrationTestOsgi.runtimeClasspath
  dependsOn copyOsgiBundle
  dependsOn jar
  shouldRunAfter test
}

check.dependsOn integrationTestOsgi
